// defines a state machine <sm>
// sm    : state*
// state : 'S' '(' name ',' case* ')'
// case  : 'C' '(' char ',' name ',' exec ')'
//       | 'D' '(' name ',' exec ')'
// char  : "'" <ascii character> "'"
// name  : <some state name>
// exec  : <some code to execute>

S(SFREE,
	C('<',  STAG)
	C('\n', s)
	D(      STEXT, push(name, '/'); push(val, c); ))

S(STEXT,
	C('<', STAG, flush(name, val); pop_until(name, '/'); )
	C('\n', s, flush(name, val); )
	D(s, push(val, c); ))

S(STAG,
	C(' ', s)
	C('/', SETAG)
	C('!', STAG_BANG)
	C('?', STAG_META)
	C('>', s, err("empty tag"); )
	D(STAG_NAME, push(name, '/'); push(name, c); ))
S(STAG_NAME,
	C(' ', STAG_)
	C('>', SFREE)
	C('/', STAG_SINGLE)
	D(s, push(name, c); ))
S(STAG_,
	C(' ', s)
	C('>', SFREE)
	C('/', STAG_SINGLE)
	D(SATTR_NAME, push(name, '/'); push(name, c); ))
S(STAG_SINGLE,
	C('>', SFREE, flush(name, val); pop_until(name, '/'); )
	D(s, err("why do you have a \"/\" in the tag?"); ))

S(SATTR_NAME,
	C('=', SATTR_VALUE)
	C(' ', STAG_, flush(name, val); pop_until(name, '/'); )
	D(s, push(name, c); ))
S(SATTR_VALUE,
	C('"', SATTR_VALUE_)
	D(s, err("attribute values must be enclosed in quotes"); ))
S(SATTR_VALUE_,
	C('\\', SATTR_VALUE_ESC)
	C('"', STAG_, flush(name, val); pop_until(name, '/'); )
	D(s, push(val, c); ))
S(SATTR_VALUE_ESC,
	D(SATTR_VALUE, push(val, '\\'); push(val, c); ))

S(SETAG,
	C('>', SFREE,
		if (!etagexpected(name, etag)) {
			err("end tag doesn't match current tag");
		}
		pop_until(name, '/');
		clear(etag);
	)
	D(s, push(etag, c); ))

S(STAG_BANG,
	C('-', STAG_COMMENT_)
	C('[', STAG_CDATA)
	D(s, err("invalid tag name"); ))
S(STAG_COMMENT_,
	C('-', STAG_COMMENT__)
	D(s, err("invalid tag name"); ))
S(STAG_COMMENT__,
	C('-', STAG_COMMENT_END)
	D(s))
S(STAG_COMMENT_END,
	C('-', STAG_COMMENT_END_)
	D(STAG_COMMENT__))
S(STAG_COMMENT_END_,
	C('>', SFREE)
	C('-', s)
	D(STAG_COMMENT__))

S(STAG_CDATA,
	C('C', STAG_CDATA_1)
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_1,
	C('D', STAG_CDATA_2)
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_2,
	C('A', STAG_CDATA_3)
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_3,
	C('T', STAG_CDATA_4)
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_4,
	C('A', STAG_CDATA_5)
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_5,
	C('[', STAG_CDATA_, push(name, '/'); )
	D(s, err("invalid bang tag"); ))
S(STAG_CDATA_,
	C(']', STAG_CDATA_END)
	C('\n', s, flush(name, val); )
	D(s, push(val, c); ))
S(STAG_CDATA_END,
	C(']', STAG_CDATA_END_)
	D(STAG_CDATA_, push(val, ']');  push(val, c); ))
S(STAG_CDATA_END_,
	C('>', SFREE, flush(name, val); pop_until(name, '/'); )
	C(']', s, push(val, ']'); )
	D(STAG_CDATA_, push(val, ']'); push(val, ']'); push(val, c); ))

S(STAG_META,
	C('?', STAG_META_END)
	C('>', SFREE, err("meta tag needs to end with \"?>\" not just \">\""); )
	D(s))
S(STAG_META_END,
	C('>', SFREE)
	D(STAG_META))

